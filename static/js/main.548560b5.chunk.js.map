{"version":3,"sources":["Cell.tsx","common.ts","utils/index.ts","api/solve.ts","api/check.ts","Board.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["memo","props","value","onChange","className","type","Number","toString","maxLength","prevProps","nextProps","BASE_API_URL","convertBoardToString","board","reduce","rowAcc","row","colAcc","cell","getBox","rowIndex","colIndex","Math","floor","getCenterCoOrds","cX","cY","box","rowOffset","colOffset","r","c","push","check","filter","_","cellIndex","getRow","col","Array","from","keys","acc","index","getCol","includes","solve","puzzle","setError","setBoard","fetch","solveApi","then","response","json","solved","fill","map","cellChar","convertStringToBoard","catch","checkApi","status","alert","getInitialBoard","Board","useState","error","onChangeFactory","useCallback","e","preventDefault","target","nValue","_board","key","onClick","length","validateSolve","validateCheck","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.548560b5.chunk.js","sourcesContent":["import React, { memo } from 'react'\n\ntype CellProps = {\n  value: number,\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst Cell = (props: CellProps) => {\n  const { value, onChange } = props;\n\n  return (<input\n    className=\"sudokuCell\"\n    type=\"number\"\n    value={Number(value).toString()}\n    onChange={onChange}\n    maxLength={1}\n  />)\n}\n\nconst isSame = (prevProps: CellProps, nextProps: CellProps): boolean => {\n  return prevProps.value === nextProps.value;\n}\n\nexport default memo(Cell, isSame);","export const BASE_API_URL = 'https://melwyn-sudoku-solver.herokuapp.com'\n\nexport type Response = {\n    puzzle: string,\n    status: string,\n    solved: boolean\n  }","// covert array -> puzzle string\nexport const convertBoardToString = (board: number[][]) =>\n  board.reduce((rowAcc: string, row: number[]) =>\n    row.reduce((colAcc: string, cell: number) =>\n      colAcc + (cell ? cell : '.'), rowAcc), '');\n\n\n// covert puzzle string -> array \nexport const convertStringToBoard = (puzzle: string) => {\n  const emptyBoard = Array(9).fill(Array(9).fill(0));\n  return emptyBoard.map((row: number[][], rowIndex: number) => {\n    return row.map((cell: number[], colIndex: number) => {\n      const cellChar = puzzle[9 * rowIndex + colIndex];\n      return cellChar === '.' ? 0 : Number(cellChar);\n    })\n  })\n}\n\nconst getRow = (board: number[][], rowIndex: number, colIndex: number) =>\n  board[rowIndex].filter((_, cellIndex: number) =>\n    cellIndex !== colIndex);\n\nconst getCol = (board: number[][], rowIndex: number, colIndex: number) =>\n  Array.from(Array(9).keys()).reduce((acc: number[], index: number) =>\n    [...acc, ...(index !== rowIndex ? [board[index][colIndex]] : [])], [])\n\nconst getCenterCoOrds = (rowIndex: number, colIndex: number) =>\n  [3 * +Math.floor(rowIndex / 3) + 1, 3 * +Math.floor(colIndex / 3) + 1]\n\nconst getBox = (board: number[][], rowIndex: number, colIndex: number) => {\n  const [cX, cY] = getCenterCoOrds(rowIndex, colIndex);\n  const box = [];\n  for (let rowOffset = -1; rowOffset < 2; rowOffset++) {\n    for (let colOffset = -1; colOffset < 2; colOffset++) {\n      const r = cX + rowOffset, c = cY + colOffset;\n      if (r !== rowIndex && c !== colIndex) {\n        box.push(board[r][c]);\n      }\n    }\n  }\n  return box;\n}\n\nconst check = (board: number[][], rowIndex: number, colIndex: number) => {\n  const row = getRow(board, rowIndex, colIndex);\n  const col = getCol(board, rowIndex, colIndex);\n  const box = getBox(board, rowIndex, colIndex);\n  const value = board[rowIndex][colIndex];\n  return !(row.includes(value) || col.includes(value) || box.includes(value));\n}\n\n// validate puzzle while checking\nexport const validateCheck = (board: number[][]) =>\n  board.reduce((rowAcc: boolean, row: number[], rowIndex: number) =>\n    row.reduce((colAcc: boolean, _: number, colIndex: number) =>\n      colAcc && check(board, rowIndex, colIndex), rowAcc), true);\n\n// validate puzzle to have atlease 17 values\nexport const validateSolve = (board: number[][]) =>\n  board.reduce((rowAcc: number[], row: number[]) =>\n    row.reduce((colAcc: number[], cell: number) =>\n      cell ? [...colAcc, cell] : colAcc, rowAcc), []).length >= 17;","import { BASE_API_URL, Response } from \"../common\";\nimport { convertStringToBoard } from \"../utils\";\n\nconst solveApi = (puzzle: string) => `${BASE_API_URL}/solve?puzzle=${puzzle}`;\n\nexport const solve = (puzzle: string,\n  setError: React.Dispatch<React.SetStateAction<string>>,\n  setBoard: React.Dispatch<React.SetStateAction<any[]>>) =>\n  fetch(solveApi(puzzle))\n    .then(response => response.json())\n    .then((r: Response) => {\n      const { puzzle, solved } = r;\n      if (solved) {\n        setError('');\n        setBoard(convertStringToBoard(puzzle));\n      } else {\n        setError('Wrong Answer');\n      }\n    })\n    .catch(() => setError('Error: Unable to solved the puzzle'));","import { BASE_API_URL, Response } from \"../common\";\n\nconst checkApi = (puzzle: string) => `${BASE_API_URL}/check?puzzle=${puzzle}`;\n\nexport const check = (puzzle: string, setError: React.Dispatch<React.SetStateAction<string>>) =>\n  fetch(checkApi(puzzle))\n    .then(response => response.json())\n    .then((r: Response) => {\n      const { status } = r;\n      if (status) {\n        alert('Correct Answer');\n      } else {\n        setError('Wrong Answer');\n      }\n    })\n    .catch(() => setError('Error: Unable to check the puzzle'));","import React, { useState, useCallback } from 'react';\nimport Cell from './Cell';\n\nimport { solve } from './api/solve';\nimport { check } from './api/check';\nimport { convertBoardToString, validateCheck, validateSolve } from './utils';\n\nconst getInitialBoard = () => Array(9).fill(Array(9).fill(0))\n\n//() => convertStringToBoard('53..7....6..195....98....6.8...6...34..8.3..17...2...6.6....28....419..5....8..79')\n\nconst Board = () => {\n  const [board, setBoard] = useState(getInitialBoard);\n  const [error, setError] = useState('');\n  const onChangeFactory = useCallback((rowIndex: number, colIndex: number) => {\n    return (e: React.ChangeEvent<HTMLInputElement>) => {\n      e.preventDefault();\n      setError('');\n      const { target: { value } } = e;\n      let nValue = Number(value) % 10\n      nValue = nValue === 0 ? Number(value) / 10 : nValue;\n      setBoard((_board: number[][]) =>\n        _board.map((row: number[], index: number) => {\n          if (index !== rowIndex) {\n            return row;\n          }\n          return row.map((cell: number, cellIndex: number) => {\n            if (cellIndex !== colIndex) {\n              return cell\n            }\n            return nValue;\n          })\n        }));\n    }\n  }, []);\n\n  const solveClicked = () => validateSolve(board) ?\n    solve(convertBoardToString(board), setError, setBoard) :\n    setError('Invalid Sudoku');\n\n  const checkClicked = () => validateCheck(board) ?\n    check(convertBoardToString(board), setError) :\n    setError('Invalid Sudoku');\n\n  return <>\n    <div className=\"sudokuContainer\">\n      {board.map((row: number[], rowIndex: number) => {\n        return row.map((cell: number, colIndex: number) => {\n          return (\n            <Cell\n              key={`${rowIndex}_${colIndex}`}\n              value={cell}\n              onChange={onChangeFactory(rowIndex, colIndex)} />)\n        })\n      })}\n    </div>\n    <div className=\"actionPanel\">\n      <button className=\"actionButton\" onClick={solveClicked}>Solve</button>\n      <button className=\"actionButton\" onClick={checkClicked}>Check</button>\n    </div>\n    <div className=\"errorMessage\">\n      {error}\n    </div>\n  </>\n}\n\nexport default Board;","import React from 'react';\nimport './App.css';\nimport Board from './Board';\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <header className=\"sudokuSolverHeader\">\n        <h1>Sudoku Solver</h1>\n      </header>\n      <div className=\"App\">\n        <Board />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}